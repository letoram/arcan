# Expects:
#  PLATFORM_ROOT
#
# Defines:
#  ARCAN_PLATFORM
#  FSRV_PLATFORM
#  SHMIF_PLATFORM
#  LWA_PLATFORM
#  STDLIB
#
#  APPL_DEST
#  RES_DEST
#  APIMAN_DEST
#  MAN_DEST
#
# Modifies:
#  compile_options (global)
#  PLATFORM_HEADER (global)
#  OS_DYLIB_EXTENSION
#

set (PLATFORM_PATH ${PLATFORM_ROOT}/posix)

# first the shared sources and use that as a base for LWA
list(APPEND ARCAN_PLATFORM
	${PLATFORM_PATH}/mem.c
	${PLATFORM_PATH}/glob.c
	${PLATFORM_PATH}/map_resource.c
	${PLATFORM_PATH}/resource_io.c
	${PLATFORM_PATH}/strip_traverse.c
	${PLATFORM_PATH}/paths.c
	${PLATFORM_PATH}/dbpath.c
	${PLATFORM_PATH}/base64.c
	${PLATFORM_PATH}/sem.c
	${PLATFORM_PATH}/fsrv_guard.c
	${PLATFORM_PATH}/time.c
	${PLATFORM_PATH}/appl.c
	${PLATFORM_PATH}/setproctitle.c
	${PLATFORM_PATH}/warning.c
	${PLATFORM_PATH}/frameserver.c
	${PLATFORM_PATH}/fdpassing.c
	${PLATFORM_PATH}/namespace.c
	${PLATFORM_PATH}/launch.c
	${PLATFORM_PATH}/config.c
	${PLATFORM_PATH}/random.c
	${PLATFORM_PATH}/tempfile.c
	${PLATFORM_PATH}/prodthrd.c
)
set(LWA_PLATFORM ${ARCAN_PLATFORM})

# then the variant specific changes
if (${CMAKE_SYSTEM_NAME} MATCHES "NetBSD|OpenBSD")
# force these options here for now
	set(BSD_VARIANT_DEFINITIONS
		-DCLOCK_MONOTONIC_RAW=CLOCK_MONOTONIC)
	set(BSD_VARIANT_LIBS c++ stdc++)
	if(INPUT_PLATFORM STREQUAL "evdev")
		SET(INPUT_PLATFORM "wscons")
	endif()

	if (VIDEO_PLATFORM STREQUAL "egl-dri")
		list(APPEND ARCAN_PLATFORM ${PLATFORM_PATH}/psep_open.c)
	else()
		list(APPEND ARCAN_PLATFORM ${PLATFORM_PATH}/open.c)
	endif()

	list(APPEND ARCAN_PLATFORM
		${PLATFORM_PATH}/ffsll.c
	)
	list(APPEND LWA_PLATFORM
		${PLATFORM_PATH}/ffsll.c
	)
else()
	set(BSD_VARIANT_DEFINITIONS
		-DCLOCK_MONOTONIC_RAW=CLOCK_REALTIME_FAST)

	if (VIDEO_PLATFORM STREQUAL "egl-dri")
		list(APPEND ARCAN_PLATFORM ${PLATFORM_PATH}/psep_open.c)
	else()
		list(APPEND ARCAN_PLATFORM ${PLATFORM_PATH}/open.c)
	endif()
endif()

set(OS_DYLIB_EXTENSION=\".so\")
add_definitions(
	-DPLATFORM_HEADER=\"${PLATFORM_ROOT}/platform.h\"
	-D_WITH_GETLINE
	-D__UNIX
	-D__BSD
	-DLIBUSB_BSD
	${BSD_VARIANT_DEFINITIONS}
)

include(CheckSymbolExists)
check_symbol_exists(iconv "iconv.h" HAVE_ICONV)
if (NOT HAVE_ICONV)
	find_library(ICONV_LIBRARY NAMES iconv REQUIRED)
	list(APPEND ARCAN_LIBRARIES ${ICONV_LIBRARY})
endif()

set_property(SOURCE platform/posix/fdpassing.c
	APPEND PROPERTY COMPILE_FLAGS -w)
set_property(SOURCE platform/posix/fdpassing.c
	APPEND PROPERTY COMPILE_DEFINITIONS NONBLOCK_RECV)
set_property(SOURCE engine/arcan_lua.c
	APPEND PROPERTY COMPILE_DEFINITIONS
		OS_DYLIB_EXTENSION=".so")

set (SHMIF_PLATFORM
	${PLATFORM_PATH}/warning.c
	${PLATFORM_PATH}/time.c
	${PLATFORM_PATH}/sem.c
	${PLATFORM_PATH}/fdpassing.c
)

list (APPEND LWA_PLATFORM
	${PLATFORM_SOURCES}
	${SHMIF_SOURCES}
	${PLATFORM_PATH}/open.c
	${PLATFORM_PATH}/../arcan/video.c
)

if (NOT APPL_DEST)
	set(APPL_DEST ${CMAKE_INSTALL_PREFIX}/share/arcan)
endif()

if (NOT SCRIPTS_DEST)
	set(SCRIPTS_DEST ${CMAKE_INSTALL_PREFIX}/share/arcan)
endif()

if (NOT RES_DEST)
	set(RES_DEST ${CMAKE_INSTALL_PREFIX}/share/arcan)
endif()

if (NOT APIMAN_DEST)
	set(APIMAN_DEST ${CMAKE_INSTALL_PREFIX}/man/man3)
endif()

if (NOT MAN_DEST)
	set(MAN_DEST ${CMAKE_INSTALL_PREFIX}/man/man1)
endif()

LIST(APPEND STDLIB
	${BSD_VARIANT_LIBS}
)

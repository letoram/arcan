#
# Expects:
#  PLATFORM_ROOT
#
# Defines:
#  arcan_lwa (new target executable)

# Lightweight arcan is a regular arcan build where we configure an
# audio/video/input platform that uses arcan-shmif rather than the
# regular platform configuration.
#
# To achieve this, we need special handling for audio, which is
# currently done by making a separate openal build where we patch
# in the code needed for this.
#
# When audio is refactored in the same platform/etc. structure as was
# done with video and agp, we'll have a soft- version with just basic
# resampling (already here) and basic mixing (already here) and get rid
# of the licensing pollution and overhead.
#

ExternalProject_Add(openal_lwa
	SOURCE_DIR ${EXTERNAL_SRC_DIR}/git/openal
	BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/openal_lwa_static
	DOWNLOAD_COMMAND
	${EXTERNAL_DEFS}
	${CMAKE_EXTERNAL_DEFS}
		-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
		-DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/lwa
    -DALSOFT_BACKEND_DSOUND=OFF
    -DALSOFT_BACKEND_MMDEVAPI=OFF
    -DALSOFT_BACKEND_JACK=OFF
    -DALSOFT_BACKEND_COREAUDIO=OFF
    -DALSOFT_BACKEND_OPENSL=OFF
		-DALSOFT_BACKEND_ALSA=OFF
		-DALSOFT_BACKEND_OSS=OFF
		-DALSOFT_BACKEND_PULSEAUDIO=OFF
		-DALSOFT_BACKEND_PORTAUDIO=OFF
		-DALSOFT_BACKEND_SOLARIS=OFF
		-DALSOFT_BACKEND_SNDIO=OFF
		-DALSOFT_BACKEND_QSA=OFF
		-DALSOFT_BACKEND_WAVE=OFF
		-DALSOFT_BACKEND_WINMM=OFF
		-DALSOFT_MIDI_FLUIDSYNTH=OFF
		-DALSOFT_BACKEND_ARCAN=ON
		-DALSOFT_REQUIRE_ARCAN=ON
		-DALSOFT_EXAMPLES=OFF
		-DALSOFT_DLOPEN=OFF
		-DALSOFT_UTILS=OFF
		-DALSOFT_CONFIG=OFF
		-DALSOFT_TESTS=OFF
		-DARCAN_SHMIF_LIB=$<TARGET_FILE:arcan_shmif_int>
		-DARCAN_SHMIF_PATH=${CMAKE_CURRENT_SOURCE_DIR}/shmif
		-DARCAN_SHMIF_PLATFORM_HEADER=${CMAKE_CURRENT_SOURCE_DIR}/platform/platform.h
)

ExternalProject_Get_Property(openal_lwa SOURCE_DIR)
ExternalProject_Get_Property(openal_lwa BINARY_DIR)

set(LWA_LIBRARIES
	${LWA_LIBRARIES} ${CMAKE_CURRENT_BINARY_DIR}/openal_lwa_static/libopenal.a
)

set(LWA_INCLUDES
	${CMAKE_CURRENT_BINARY_DIR}/lwa/include/AL
	${INCLUDE_DIRS}
)

add_executable(arcan_lwa
	${SOURCES}
	${AGP_SOURCES}
	${LWA_PLATFORM}
	${PLATFORM_ROOT}/arcan/video.c
	${PLATFORM_ROOT}/audio/openal.c
)

add_sanitizers(arcan_lwa)

if (${VIDEO_PLATFORM} MATCHES "egl-dri")
	set_property(SOURCE ${PLATFORM_ROOT}/arcan/video.c
		APPEND PROPERTY COMPILE_DEFINITIONS EGL_DMA_BUF)
endif()

add_dependencies(openal_lwa arcan_shmif_int)
add_dependencies(arcan_lwa arcan_shmif_int arcan_shmif_intext openal_lwa ${MAIN_DEPS})

target_compile_definitions(arcan_lwa PRIVATE
	ARCAN_LWA
	${ARCAN_DEFINITIONS}
)

add_dependencies(arcan_lwa openal_lwa)

target_include_directories(arcan_lwa PRIVATE ${INCLUDE_DIRS})
target_link_libraries(arcan_lwa
	${STDLIB}
	${ARCAN_LIBRARIES}
	${AGP_LIBRARIES}
	${LWA_LIBRARIES}
	${VIDEO_LIBRARIES}
	arcan_shmif_int
	arcan_shmif_intext
)

if (ARCAN_LNK_FLAGS)
set_property(TARGET arcan_lwa APPEND PROPERTY LINK_FLAGS ${ARCAN_LNK_FLAGS})
endif()

set(PLATFORM_BUILDTAG lwa-${AGP_PLATFORM}-${AUDIO_PLATFORM}-lwa-${LUA_TAG}-${DISTR_TAG})
target_compile_definitions(arcan_lwa PRIVATE
	FRAMESERVER_MODESTRING=\"${FRAMESERVER_MODESTRING}\"
	ARCAN_BUILDVERSION=\"${SOURCE_TAG}-${PLATFORM_BUILDTAG}-${CMAKE_SYSTEM_NAME}\"
)

install(TARGETS arcan_lwa DESTINATION ${CMAKE_INSTALL_BINDIR})
